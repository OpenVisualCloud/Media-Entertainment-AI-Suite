name: Docker Build Template

on:
  workflow_call:
    inputs:
      build_type:
        required: false
        type: string
        default: "Release"
      docker_registry:
        required: false
        type: string
        default: "ghcr.io"
      docker_registry_prefix:
        required: false
        type: string
        default: "openvisualcloud/media-entertainment-ai-suite"
      docker_registry_login:
        required: false
        type: boolean
        default: false
      docker_registry_push:
        required: false
        type: boolean
        default: false
      docker_build_args:
        required: false
        type: string
        default: ""
      docker_build_platforms:
        required: false
        type: string
        default: "linux/amd64"
      docker_image_tag:
        required: false
        type: string
      docker_image_name:
        required: true
        type: string
      docker_file_path:
        required: false
        type: string
        default: "Dockerfile"
    secrets:
      docker_registry_login:
        required: false
      docker_registry_passkey:
        required: false

permissions:
  contents: read

env:
  BUILD_TYPE: "${{ inputs.build_type }}"
  TRIVY_TIMEOUT: "30m0s"
  CONCURRENCY_GROUP: "${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}"
  DOCKER_REGISTRY: "${{ inputs.docker_registry }}"
  DOCKER_REGISTRY_LOGIN: "${{ github.repository == 'openvisualcloud/media-entertainment-ai-suite' && inputs.docker_registry_login }}"
  DOCKER_BUILD_ARGS: "${{ inputs.docker_build_args }}"
  DOCKER_PLATFORMS: "${{ inputs.docker_build_platforms }}"
  DOCKER_IMAGE_PUSH: "${{ github.repository == 'openvisualcloud/media-entertainment-ai-suite' && inputs.docker_registry_push }}"
  DOCKER_IMAGE_BASE: "${{ inputs.docker_registry }}/${{ inputs.docker_registry_prefix }}"
  DOCKER_IMAGE_TAG: "${{ inputs.docker_image_tag || github.sha }}"
  DOCKER_IMAGE_NAME: "${{ inputs.docker_image_name }}"
  DOCKER_FILE_PATH: "${{ inputs.docker_file_path || 'Dockerfile' }}"
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-docker-image:
    name: "${{ inputs.docker_image_name }}: Performing build of Docker image from Dockerfile."
    runs-on: ["self-hosted", "docker", "Linux"]
    permissions:
      contents: write
      packages: write
    timeout-minutes: 240
    steps:
      - name: "${{ inputs.docker_image_name }}: Harden Runner"
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit

      - name: "${{ inputs.docker_image_name }}: Checkout repository"
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: "${{ inputs.docker_image_name }}: Set up Docker Buildx"
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
        with:
          platforms: "linux/amd64/v4"

      - name: "${{ inputs.docker_image_name }}: Login to Docker Container Registry"
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        if: ${{ env.DOCKER_REGISTRY_LOGIN == 'true' }}
        continue-on-error: true
        with:
          registry: "${{ env.DOCKER_REGISTRY }}"
          username: "${{ secrets.docker_registry_login   || github.repository_owner }}"
          password: "${{ secrets.docker_registry_passkey || secrets.GITHUB_TOKEN }}"

      - name: "${{ inputs.docker_image_name }}: Build and push image"
        uses: docker/build-push-action@1a162644f9a7e87d8f4b053101d1d9a712edc18c # v6.3.0
        with:
          load: true
          push: "${{ env.DOCKER_IMAGE_PUSH }}"
          platforms: "linux/amd64/v4"
          file: "${{ env.DOCKER_FILE_PATH }}"
          tags: "${{ env.DOCKER_IMAGE_BASE }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}"
          target: runtime-stage
          cache-from: type=gha,scope=${{ env.DOCKER_IMAGE_NAME }}
          cache-to: type=gha,mode=max,scope=${{ env.DOCKER_IMAGE_NAME }}
          build-args: "${{ env.DOCKER_BUILD_ARGS }}"

  scan-docker-image:
    name: "${{ inputs.docker_image_name }}: Performing scan of Docker image from Dockerfile."
    runs-on: ["ubuntu-22.04"]
    needs: build-docker-image
    permissions:
      contents: write
      packages: read
      security-events: write
    timeout-minutes: 60
    steps:
      - name: "${{ inputs.docker_image_name }}: Harden Runner"
        uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
        with:
          egress-policy: audit

      - name: "${{ inputs.docker_image_name }}: Checkout repository"
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: "${{ inputs.docker_image_name }}: Set up Docker Buildx"
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
        with:
          platforms: "linux/amd64/v4"

      - name: "${{ inputs.docker_image_name }}: Login to Docker Container Registry"
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        if: ${{ env.DOCKER_REGISTRY_LOGIN == 'true' }}
        continue-on-error: true
        with:
          registry: "${{ env.DOCKER_REGISTRY }}"
          username: "${{ secrets.docker_registry_login   || github.repository_owner }}"
          password: "${{ secrets.docker_registry_passkey || secrets.GITHUB_TOKEN }}"

      - name: "${{ inputs.docker_image_name }}: Scanner Trivy run vulnerability scanner on image"
        uses: aquasecurity/trivy-action@6c175e9c4083a92bbca2f9724c8a5e33bc2d97a5 # v0.30.0
        continue-on-error: true
        with:
          image-ref: "${{ env.DOCKER_IMAGE_BASE }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}"
          format: "sarif"
          output: "trivy-image-vulnerability-scanner.sarif"

      - name: "${{ inputs.docker_image_name }}: Scanner Trivy upload results as artifacts"
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # V4.4.3
        continue-on-error: true
        with:
          name: "trivy-image-vulnerability-scanner.sarif"
          path: "${{ github.workspace }}/trivy-image-vulnerability-scanner.sarif"
          retention-days: 14

      - name: "${{ inputs.docker_image_name }}: Scanner Trivy upload results to Security tab"
        uses: github/codeql-action/upload-sarif@2e230e8fe0ad3a14a340ad0815ddb96d599d2aff # v3.25.8
        continue-on-error: true
        with:
          sarif_file: "${{ github.workspace }}/trivy-image-vulnerability-scanner.sarif"

      - name: "${{ inputs.docker_image_name }}: Scanner Trivy in GitHub SBOM mode and submit results to Dependency Graph"
        uses: aquasecurity/trivy-action@6c175e9c4083a92bbca2f9724c8a5e33bc2d97a5 # v0.30.0
        continue-on-error: true
        with:
          image-ref: "${{ env.DOCKER_IMAGE_BASE }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}"
          scan-type: "image"
          format: "github"
          scanners: "vuln,secret,misconfig,license"
          output: "dependency-results.sbom.json"
          github-pat: ${{ secrets.GITHUB_TOKEN }}

      - name: "${{ inputs.docker_image_name }}: Scanner Trivy in SPDX SBOM mode"
        uses: aquasecurity/trivy-action@6c175e9c4083a92bbca2f9724c8a5e33bc2d97a5 # v0.30.0
        continue-on-error: true
        with:
          image-ref: "${{ env.DOCKER_IMAGE_BASE }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}"
          scan-type: "image"
          format: "spdx"
          scanners: "vuln,secret,misconfig,license"
          output: "dependency-results.spdx"
          github-pat: ${{ secrets.GITHUB_TOKEN }}

      - name: "${{ inputs.docker_image_name }}: Scanner Trivy upload sbom report as a Github artifact"
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: "trivy-image-sbom-report.spdx"
          path: "${{ github.workspace }}/dependency-results.spdx"
          retention-days: 14
